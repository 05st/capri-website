"use strict";(self.webpackChunkcapri_website=self.webpackChunkcapri_website||[]).push([[130],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>y});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),l=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(r),y=n,f=d["".concat(p,".").concat(y)]||d[y]||u[y]||s;return r?a.createElement(f,i(i({ref:t},c),{},{components:r})):a.createElement(f,i({ref:t},c))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var l=2;l<s;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8826:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const s={},i="Algebraic Data Types",o={unversionedId:"language-features/algebraic-data-types/algebraic-data-types",id:"language-features/algebraic-data-types/algebraic-data-types",title:"Algebraic Data Types",description:"The expressive type system is an important part of Capri, which is why being able to define new data types is an esssential feature. Algebraic data types are new types created by composing other data types. All ADTs are eventually composed from the base types.",source:"@site/docs/language-features/02-algebraic-data-types/02-algebraic-data-types.md",sourceDirName:"language-features/02-algebraic-data-types",slug:"/language-features/algebraic-data-types/",permalink:"/capri-website/language-features/algebraic-data-types/",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"User Defined Operators",permalink:"/capri-website/language-features/user-defined-operators"},next:{title:"Record Operations",permalink:"/capri-website/language-features/algebraic-data-types/record-operations"}},p={},l=[{value:"Records",id:"records",level:2},{value:"Variants",id:"variants",level:2}],c={toc:l};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"algebraic-data-types"},"Algebraic Data Types"),(0,n.kt)("p",null,"The expressive type system is an important part of Capri, which is why being able to define new data types is an esssential feature. ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Algebraic_data_type"},"Algebraic data types")," are new types created by composing other data types. All ADTs are eventually composed from the base types."),(0,n.kt)("h2",{id:"records"},"Records"),(0,n.kt)("p",null,"Records, also known as product types, are very similar to structs from languages such as C."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"type Person = {name: str, age: i64, height: f64};\n")),(0,n.kt)("p",null,"To use records, there are a few record operations which we will see next."),(0,n.kt)("h2",{id:"variants"},"Variants"),(0,n.kt)("p",null,"Variants are also known as sum types. They are similar to enums found in other languages."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"type Event = <key: char, mouse: i64>;\n")),(0,n.kt)("p",null,"Variants are handled through pattern matching."))}u.isMDXComponent=!0}}]);