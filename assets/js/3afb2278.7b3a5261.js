"use strict";(self.webpackChunkcapri_website=self.webpackChunkcapri_website||[]).push([[276],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=l(n),m=r,d=f["".concat(c,".").concat(m)]||f[m]||u[m]||i;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=f;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},200:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={},s="Pattern Matching Variants",o={unversionedId:"language-features/algebraic-data-types/pattern-matching-variants",id:"language-features/algebraic-data-types/pattern-matching-variants",title:"Pattern Matching Variants",description:"To extract values from a variant, you must pattern match against it and handle all of the different possible cases. Otherwise, an unhandled case can result in a runtime panic.",source:"@site/docs/language-features/02-algebraic-data-types/04-pattern-matching-variants.md",sourceDirName:"language-features/02-algebraic-data-types",slug:"/language-features/algebraic-data-types/pattern-matching-variants",permalink:"/capri-website/language-features/algebraic-data-types/pattern-matching-variants",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Record Operations",permalink:"/capri-website/language-features/algebraic-data-types/record-operations"},next:{title:"Module System",permalink:"/capri-website/module-system"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pattern-matching-variants"},"Pattern Matching Variants"),(0,r.kt)("p",null,"To extract values from a variant, you must pattern match against it and handle all of the different possible cases. Otherwise, an unhandled case can result in a runtime panic."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'module main;\nimport io;\n\ntype MaybeI64 = <just: i64, none: unit>;\n\nfn doesMaybeExist(m: MaybeI64): str\n    match m {\n        just n => "exists",\n        none a => "doesn\'t exist"\n    };\n\nfn main() {\n    let testA: MaybeI64 = <just = 42>;\n    let testB: MaybeI64 = <none = ()>;\n\n    print(doesMaybeExist(testA)); // Outputs "exists"\n    print(doesMaybeExist(testB)); // Outputs "doesn\'t exist"\n};\n')))}u.isMDXComponent=!0}}]);