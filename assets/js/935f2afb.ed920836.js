"use strict";(self.webpackChunkcapri_website=self.webpackChunkcapri_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/capri-website/","docId":"introduction"},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/capri-website/getting-started/installation","docId":"getting-started/installation"},{"type":"link","label":"Usage","href":"/capri-website/getting-started/usage","docId":"getting-started/usage"}],"href":"/capri-website/category/getting-started"},{"type":"category","label":"Basic Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Expressions","href":"/capri-website/basic-concepts/expressions","docId":"basic-concepts/expressions"},{"type":"category","label":"Variables","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Mutability","href":"/capri-website/basic-concepts/variables/mutability","docId":"basic-concepts/variables/mutability"}],"href":"/capri-website/basic-concepts/variables/"},{"type":"category","label":"Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Recursion","href":"/capri-website/basic-concepts/functions/recursion","docId":"basic-concepts/functions/recursion"}],"href":"/capri-website/basic-concepts/functions/"}],"href":"/capri-website/category/basic-concepts"},{"type":"category","label":"Language Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"User Defined Operators","href":"/capri-website/language-features/user-defined-operators","docId":"language-features/user-defined-operators"},{"type":"category","label":"Algebraic Data Types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Record Operations","href":"/capri-website/language-features/algebraic-data-types/record-operations","docId":"language-features/algebraic-data-types/record-operations"},{"type":"link","label":"Pattern Matching Variants","href":"/capri-website/language-features/algebraic-data-types/pattern-matching-variants","docId":"language-features/algebraic-data-types/pattern-matching-variants"}],"href":"/capri-website/language-features/algebraic-data-types/"}],"href":"/capri-website/category/language-features"},{"type":"category","label":"Modules","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Defining Modules","href":"/capri-website/modules/defining-modules","docId":"modules/defining-modules"},{"type":"link","label":"Controlling Visibility","href":"/capri-website/modules/controlling-visibility","docId":"modules/controlling-visibility"}],"href":"/capri-website/category/modules"},{"type":"category","label":"Miscellaneous","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Calling C Functions","href":"/capri-website/miscellaneous/calling-c-functions","docId":"miscellaneous/calling-c-functions"}],"href":"/capri-website/category/miscellaneous"}]},"docs":{"basic-concepts/expressions":{"id":"basic-concepts/expressions","title":"Expressions","description":"In Capri, nearly everything is an expression by design. An expression is something that has a value.","sidebar":"tutorialSidebar"},"basic-concepts/functions/functions":{"id":"basic-concepts/functions/functions","title":"Functions","description":"Functions are a cruicial aspect of programming - any decent programming language should support defining functions and procedures. Capri in particular puts a strong emphasis on functional programming: to build up complexity through the composition of simpler functions.","sidebar":"tutorialSidebar"},"basic-concepts/functions/recursion":{"id":"basic-concepts/functions/recursion","title":"Recursion","description":"It\'s essential for a functional programming language to allow functions being defined in terms of themselves (recursively).","sidebar":"tutorialSidebar"},"basic-concepts/variables/mutability":{"id":"basic-concepts/variables/mutability","title":"Mutability","description":"By default, all variables are immutable. This means you can\'t assign to them (mutate them).","sidebar":"tutorialSidebar"},"basic-concepts/variables/variables":{"id":"basic-concepts/variables/variables","title":"Variables","description":"Declaring, initializing, and using variables are some of the most fundamental ideas in programming.","sidebar":"tutorialSidebar"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"You can install Capri by either compiling it from source yourself or by downloading precompiled binaries.","sidebar":"tutorialSidebar"},"getting-started/usage":{"id":"getting-started/usage","title":"Usage","description":"Make sure you have a C compiler installed. On Linux, it\'s highly recommended to use gcc, on Windows tcc works well, and on macOS clang should already be available.","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Introduction","description":"Welcome to the Capri docs. If you believe any changes should be made here, please open a pull request on the website\'s GitHub repository.","sidebar":"tutorialSidebar"},"language-features/algebraic-data-types/algebraic-data-types":{"id":"language-features/algebraic-data-types/algebraic-data-types","title":"Algebraic Data Types","description":"The expressive type system is an important part of Capri, which is why being able to define new data types is an esssential feature. Algebraic data types are new types created by composing other data types. All ADTs are eventually composed from the base types.","sidebar":"tutorialSidebar"},"language-features/algebraic-data-types/pattern-matching-variants":{"id":"language-features/algebraic-data-types/pattern-matching-variants","title":"Pattern Matching Variants","description":"","sidebar":"tutorialSidebar"},"language-features/algebraic-data-types/record-operations":{"id":"language-features/algebraic-data-types/record-operations","title":"Record Operations","description":"","sidebar":"tutorialSidebar"},"language-features/user-defined-operators":{"id":"language-features/user-defined-operators","title":"User Defined Operators","description":"Capri is designed with user extensibility in mind. Because of that, defining your own operators is a key feature that it offers.","sidebar":"tutorialSidebar"},"miscellaneous/calling-c-functions":{"id":"miscellaneous/calling-c-functions","title":"Calling C Functions","description":"","sidebar":"tutorialSidebar"},"modules/controlling-visibility":{"id":"modules/controlling-visibility","title":"Controlling Visibility","description":"","sidebar":"tutorialSidebar"},"modules/defining-modules":{"id":"modules/defining-modules","title":"Defining Modules","description":"","sidebar":"tutorialSidebar"}}}')}}]);