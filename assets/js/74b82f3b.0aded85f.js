"use strict";(self.webpackChunkcapri_website=self.webpackChunkcapri_website||[]).push([[623],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),f=p(t),b=s,d=f["".concat(l,".").concat(b)]||f[b]||u[b]||i;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function b(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,o=new Array(i);o[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:s,o[1]=a;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7647:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var r=t(7462),s=(t(7294),t(3905));const i={},o="Expressions",a={unversionedId:"basic-concepts/expressions",id:"basic-concepts/expressions",title:"Expressions",description:"In Capri, nearly everything is an expression by design. An expression is something that has a value.",source:"@site/docs/basic-concepts/01-expressions.md",sourceDirName:"basic-concepts",slug:"/basic-concepts/expressions",permalink:"/capri-website/basic-concepts/expressions",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basic Concepts",permalink:"/capri-website/category/basic-concepts"},next:{title:"Variables",permalink:"/capri-website/basic-concepts/variables/"}},l={},p=[{value:"Literal expressions",id:"literal-expressions",level:2},{value:"Block expressions",id:"block-expressions",level:2},{value:"If expressions",id:"if-expressions",level:2},{value:"Match expressions",id:"match-expressions",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"expressions"},"Expressions"),(0,s.kt)("p",null,"In Capri, nearly everything is an expression by design. An expression is something that has a value."),(0,s.kt)("h2",{id:"literal-expressions"},"Literal expressions"),(0,s.kt)("p",null,"Literal expressions are simply things like integer/float literals, boolean literals, string literals, character literals, and so on."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"// Integers\n123\n981245172\n\n// Floats\n12.34\n3.14159\n\n// Booleans\ntrue\nfalse\n\n// Unit\n()\n")),(0,s.kt)("h2",{id:"block-expressions"},"Block expressions"),(0,s.kt)("p",null,"Even code blocks are treated as expressions! They evaluate to whatever the last expression is. If there is no final expression, they implicitly evaluate into ",(0,s.kt)("inlineCode",{parentName:"p"},"()")," (unit)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"// This code block evaluates to 12.34\n{\n    abc;\n    let stuff = xyz();\n    12.34\n}\n\n// There's no final expression in this one - so it implicitly evaluates into a ()\n{\n    let res = call_some_func(42);\n    if res { ... } else { ... };\n    12.34; // This is not an expression, it's an expression statement\n}\n")),(0,s.kt)("h2",{id:"if-expressions"},"If expressions"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"if cond a b\n")),(0,s.kt)("h2",{id:"match-expressions"},"Match expressions"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"match xyz {\n    // ...\n}\n")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"We will discuss if expressions, match expressions, and even lambda expressions later on."))}u.isMDXComponent=!0}}]);