"use strict";(self.webpackChunkcapri_website=self.webpackChunkcapri_website||[]).push([[796],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>d});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),u=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},l=function(e){var r=u(e.components);return n.createElement(p.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=u(t),d=a,g=f["".concat(p,".").concat(d)]||f[d]||c[d]||i;return t?n.createElement(g,o(o({ref:r},l),{},{components:t})):n.createElement(g,o({ref:r},l))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var s={};for(var p in r)hasOwnProperty.call(r,p)&&(s[p]=r[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9974:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=t(7462),a=(t(7294),t(3905));const i={},o="User Defined Operators",s={unversionedId:"language-features/user-defined-operators",id:"language-features/user-defined-operators",title:"User Defined Operators",description:"Capri is designed with user extensibility in mind. Because of that, defining your own operators is a key feature that it offers.",source:"@site/docs/language-features/01-user-defined-operators.md",sourceDirName:"language-features",slug:"/language-features/user-defined-operators",permalink:"/capri-website/language-features/user-defined-operators",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Language Features",permalink:"/capri-website/category/language-features"},next:{title:"Algebraic Data Types",permalink:"/capri-website/language-features/algebraic-data-types/"}},p={},u=[{value:"Defining operators",id:"defining-operators",level:2}],l={toc:u};function c(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"user-defined-operators"},"User Defined Operators"),(0,a.kt)("p",null,"Capri is designed with user extensibility in mind. Because of that, defining your own operators is a key feature that it offers."),(0,a.kt)("h2",{id:"defining-operators"},"Defining operators"),(0,a.kt)("p",null,"Defining an operator is similar to defining a function, except you must specify a fixity and a precedence."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// Exponentiation operator\nop infixr 10 ** (base, exp) {\n    let mut count = 0;\n    let mut res = 1;\n    while cout < res {\n        res = res * base;\n        count = count + 1;\n    };\n    res\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"2 ** 6 // Evaluates to 64\n")),(0,a.kt)("p",null,"All possibile fixities are: ",(0,a.kt)("inlineCode",{parentName:"p"},"infix"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"infixl"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"infixr"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"prefix"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"postfix"),". The precedence can be an arbitrarily large positive integer."))}c.isMDXComponent=!0}}]);